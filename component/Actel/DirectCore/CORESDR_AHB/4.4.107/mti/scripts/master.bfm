#===========================================================
#
# Syntax:
# -------
#
# memmap    resource_name base_address;
#
# write     width resource_name byte_offset data;
# read      width resource_name byte_offset;
# readcheck width resource_name byte_offset data;
# wait      clock_ticks;
# poll      width resource_name byte_offset bit_mask;
#
#===========================================================


#-----------------------------------------------------------
# Memory Map
# Define name and base address of each resource.
#-----------------------------------------------------------
memmap address0 0x00000000;
memmap address1 0x00000010;
memmap address2 0x00000100;
memmap address3 0x00030000;
memmap address4 0x00100000;
memmap address5 0x00050000;
memmap address6 0x00006000;
memmap address7 0x00000700;
memmap address8 0x00000080;
memmap address9 0x00000900;
memmap address10 0x000a0000;
memmap address11 0x00070000;
memmap address12 0x000c0000;
memmap address13 0x0000d000;
memmap address14 0x00000e00;
memmap address15 0x0000f000;

// global variables to store local copy of testbench parameters and constants
// derived from testbench parameters
int FAMILY 

procedure main

int i,k;

header "CoreAhbSDR Master Test Harness"
debug 1;



// initialize local variables passed from testbench HDL to the
// ARGVALUE* BFM parameters
call init_parameter_vars
timeout 100000	// timeout in cycles, in case BFM stalls
wait 10000  // initialization delay for SDRAM


burst 0;
write h 0x00000006 0x0 0x500d;
readcheck h 0x00000006 0x0 0x500d;
write b 0x00000006 0x0 0xdd;
write b 0x00000007 0x0 0xee;
readcheck h 0x00000006 0x0 0xeedd;
 
write h 0x00000000 0x0 0x500d;
write h 0x00000002 0x0 0xeedd;
readcheck w 0x00000000 0x0 0xeedd500d;



burst 1;

writemult w 0x0 0x00000000 0x11111111 0x22222222 0x33333333 0x44444444
readmultchk w 0x00000000 0x0 0x11111111 0x22222222 0x33333333 0x44444444


burst 0;

write w 0x00000004 0x0 0x55555555;
write w 0x00000008 0x0 0x66666666;
write w 0x00000010 0x0 0x44444444;
write w 0x00000004 0x0 0x55555555;
write w 0x00000008 0x0 0x66666666;
write w 0x00000010 0x0 0x44444444;
write w 0x00000004 0x0 0x55555555;
write w 0x00000008 0x0 0x66666666;
write w 0x00000010 0x0 0x44444444;


burst 2;

writemult w 0x0 0x00000000 0x11111111 0x22222222 0x33333333 0x44444444
writemult w 0x0 0x00000010 0x55555555 0x66666666 0x77777777 0x88888888
writemult w 0x0 0x00000020 0x12121212 0x34343434 0x56565656 0x78787878
writemult w 0x0 0x00000030 0x21212121 0x43434343 0x65656565 0x87878787
writemult w 0x0 0x00000040 0x11110000 0x22220000 0x33330000 0x44440000
writemult w 0x0 0x00000050 0x55550000 0x66660000 0x77770000 0x88880000

wait 1000

burst 2;

writemult w 0x0 0x00000000 0x11111111 0x22222222 0x33333333 0x44444444
writemult w 0x0 0x00000010 0x55555555 0x66666666 0x77777777 0x88888888
writemult w 0x0 0x00000020 0x12121212 0x34343434 0x56565656 0x78787878
writemult w 0x0 0x00000030 0x21212121 0x43434343 0x65656565 0x87878787
writemult w 0x0 0x00000040 0x11110000 0x22220000 0x33330000 0x44440000
writemult w 0x0 0x00000050 0x55550000 0x66660000 0x77770000 0x88880000

burst 0;

readcheck w 0x00000000 0x0 0x11111111;
readcheck w 0x00000004 0x0 0x22222222;
readcheck w 0x00000008 0x0 0x33333333;
readcheck w 0x0000000c 0x0 0x44444444;
readcheck w 0x00000010 0x0 0x55555555;
readcheck w 0x00000014 0x0 0x66666666;
readcheck w 0x00000018 0x0 0x77777777;
readcheck w 0x0000001c 0x0 0x88888888;

burst 2;

readmultchk w 0x00000000 0x0 0x11111111 0x22222222 0x33333333 0x44444444
readmultchk w 0x00000010 0x0 0x55555555 0x66666666 0x77777777 0x88888888
readmultchk w 0x00000020 0x0 0x12121212 0x34343434 0x56565656 0x78787878

writemult w 0x0 0x00000034 0x11111111 0x22222222 0x33333333 0x44444444
readmultchk w 0x00000034 0x0 0x11111111 0x22222222 0x33333333 0x44444444
writemult w 0x0 0x00000050 0x11111111 0x22222222 0x33333333 0x44444444
readmultchk w 0x00000050 0x0 0x11111111 0x22222222 0x33333333 0x44444444
writemult w 0x0 0x00000068 0x11111111 0x22222222 0x33333333 0x44444444
readmultchk w 0x00000068 0x0 0x11111111 0x22222222 0x33333333 0x44444444

burst 4;

writemult w 0x0 0x00000034 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111
readmultchk w 0x00000034 0x0 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111
  
burst 5;

writemult w 0x0 0x00000034 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111
readmultchk w 0x00000034 0x0 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111


burst 6;
writemult w 0x0 0x00000008 0x33333333 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x22222222
readmultchk w 0x00000008 0x0 0x33333333 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x11111111 0x22222222

burst 7;
writemult w 0x0 0x00000000 0x11111111 0x22222222 0x33333333 0x44444444 0x11111111 0x22222222 0x33333333 0x44444444 0x11111111 0x22222222 0x33333333 0x44444444 0x11111111 0x22222222 0x33333333 0x44444444
readmultchk w 0x00000000 0x0 0x11111111 0x22222222 0x33333333 0x44444444 0x11111111 0x22222222 0x33333333 0x44444444 0x11111111 0x22222222 0x33333333 0x44444444 0x11111111 0x22222222 0x33333333 0x44444444

wait 1000

  



return
//---------------------------------------------------------------------------
// initialize local variables from the ARGVALUE* BFM parameters passed
// down from the testbench HDL
//---------------------------------------------------------------------------
procedure init_parameter_vars
	set FAMILY			        $ARGVALUE0
return
